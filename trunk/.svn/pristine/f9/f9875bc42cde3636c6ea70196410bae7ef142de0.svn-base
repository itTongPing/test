package com.aukey.report.web.purchaseSell;

import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.aukey.report.base.BaseController;
import com.aukey.report.domain.purchaseSell.PurchaseSellStockVO;
import com.aukey.report.service.purchaseSell.PurchaseSellStockService;
import com.aukey.report.dto.StockAgeReportParam;
import com.aukey.report.dto.purchaseSell.PurchaseSellStockParam;
import com.aukey.report.utils.PurchaseSellReportExcel;
import com.aukey.report.utils.export.DataField;
import com.aukey.report.utils.export.DataPage;
import com.aukey.report.utils.export.ExportDataSource;
import com.aukey.report.utils.export.excel.ExcelDataExportor;
import com.aukey.report.utils.export.excel.MODE;
import com.aukey.report.utils.page.PageParam;
import com.aukey.report.utils.page.TableData;
import com.aukey.report.vo.InventoryResult;
import com.aukey.report.vo.StockAgeReportVO;
import com.aukey.report.vo.InventoryResult.InventoryVO;
import com.aukey.util.AjaxResponse;
import com.aukey.util.HttpUtil;

@RequestMapping("/report/purchaseSellStock")
@Controller
public class PurchaseSellStockController extends BaseController{
	
	private Logger logger = Logger.getLogger(getClass());
	@Autowired
	private PurchaseSellStockService purchaseSellStockService;
	
	@Value("${inventory.api.url}")
	private String inventory_name_list_url;
	
	@RequestMapping("/index")
	public String index(ModelMap modelMap) {
		// 获取仓库名称列表
		List<InventoryVO> inventoryV_list = new ArrayList<InventoryVO>();
		AjaxResponse inventory_name_result = HttpUtil.doGet(inventory_name_list_url);
		if (inventory_name_result.getData() != null) {
			InventoryResult inventoryResult = null;
			try {
				inventoryResult = JSON.parseObject(inventory_name_result.getData().toString(), InventoryResult.class);
			} catch (Exception e) {
				logger.error("JSON格式转换出了问题");
			}
			List<InventoryVO> inventoryV_list_all = null;
			if(inventoryResult != null){
				inventoryV_list_all = inventoryResult.getList();
				for (InventoryVO vo : inventoryV_list_all) {
					inventoryV_list.add(vo);
				}
				modelMap.addAttribute("warehouses", inventoryV_list);
			}
			
		}
		return "purchaseSellStockReport";
	}
	
	
	@RequestMapping("/search")
	@ResponseBody
	public TableData<PurchaseSellStockVO> search(PurchaseSellStockParam param,
			@RequestParam(value = "pageNumber", defaultValue = "1") int pageNumber,
			@RequestParam(value = "limit", defaultValue = "10") int limit) {
		PageParam pageParam = new PageParam(pageNumber, limit);
		TableData<PurchaseSellStockVO> result = purchaseSellStockService.listPage(pageParam, param);
		return result;
	}
	
	@RequestMapping("/preExport")
	@ResponseBody
	public AjaxResponse preExport(PurchaseSellStockParam param, HttpServletRequest request, HttpServletResponse response) {
		int count = purchaseSellStockService.count(param);
		if (count > exportMaxNumber) {
			return new AjaxResponse().failure("导出的数据量太大，请选择过滤条件");
		}
		return new AjaxResponse();
	}
	
	@RequestMapping("/export")
	public ModelAndView export(PurchaseSellStockParam param, HttpServletRequest request, HttpServletResponse response) {
		try {
			final SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			String filename = "进销存报表_" + sdf.format(new Date());
			response.setHeader("Content-disposition", "attachment; filename=" + URLEncoder.encode(filename + ".xls", "utf-8"));
			OutputStream os = response.getOutputStream();
			PageParam pageParam = new PageParam(1, exportMaxNumber);
			TableData<PurchaseSellStockVO> pageResult = purchaseSellStockService.listPage(pageParam, param);
			List<PurchaseSellStockVO> list = pageResult.getRows();
			new PurchaseSellReportExcel().writeExc(os, list);
		} catch (RowsExceededException e) {
			logger.error("下载报表", e);
		} catch (IOException e) {
			logger.error("IO", e);
		} catch (WriteException e) {
			logger.error("WriteException", e);
		}
		ModelAndView mv = new ModelAndView("purchaseSellStockReport");
		return mv;
	}
	
	
}
